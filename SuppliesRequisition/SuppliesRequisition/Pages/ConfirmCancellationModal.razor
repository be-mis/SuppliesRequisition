@using SuppliesRequisition.Model
@using SuppliesRequisition.Data
@using static SuppliesRequisition.Pages.RequestList

@inject ApplicationDbContext _dbcontext
@inject SAPService _sapService
@inject IJSRuntime _runtime
@inject IMyDataConnection _data
@inject IConfiguration _config
@inject NavigationManager _navigation

<style>
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal overlay styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: none;
        align-items: center;
        justify-content: center;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .close-button {
        border: none;
        background-color: #fff;
        color: #000;
        border-radius: 2px;
    }

        .close-button:hover {
            color: #fff;
            background-color: #AA0061;
        }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        border: 1px solid #888;
        width: 18%;
    }

    .yes-request-button {
        padding: 2px 16px;
        background-color: #fff;
        border: 1px solid #AA0061;
        color: #AA0061;
        border-radius: 2px;
    }

        .yes-request-button:hover {
            background-color: #AA0061;
            color: white;
        }

    .no-request-button {
        padding: 2px 16px;
        background-color: #616161;
        border: 1px solid #616161;
        color: #fff;
        border-radius: 2px;
    }

        .no-request-button:hover {
            background-color: #fff;
            color: #616161;
        }

    p {
        margin-bottom: 0px !important;
    }
</style>

<div class="modal" style="@ModalStyle">
    <div class="modal-content">
        <div class="modal-header">
            <p class="upload-memorandum">
                <span class="upload">Cancel</span>
                <span class="memorandum">Request</span>
            </p>
        </div>
        <div class="modal-body">
            @if (RequestItemDetails != null && RequestItemDetails.details != null)
            {
                <p>Are you sure you want to CANCEL <b>Request Number @RequestItemDetails.HeaderId</b> ?</p>
            }
        </div>
        <div class="modal-footer">
            <button @onclick="Confirm" class="yes-request-button">
                Yes
            </button>
            <button @onclick="Close" class="no-request-button">
                No
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public RequisitionHeader RequestItemDetails { get; set; } // Ensure this is public
    [Parameter] public EventCallback<bool> OnConfirm { get; set; }
    [Parameter] public EventCallback<bool> OnCancel { get; set; }


    private string ModalStyle => ShowModal ? "display: block;" : "display: none;";
    private bool ShowModal { get; set; }

    public void OpenModal()
    {
        ShowModal = true;
        StateHasChanged(); // Update the UI
    }

    private async Task Confirm()
    {
        try
        {
            if (RequestItemDetails != null && RequestItemDetails.HeaderId > 0) // Ensure ID is valid
            {
                RequestItemDetails.Status = "Canceled";

                string connectionString = _config.GetConnectionString("DefaultConnection");

                string updateHeaderQuery = @"
                    UPDATE requisitionheaders
                    SET Status = @Status
                    WHERE HeaderId = @Id";

                await _data.SaveData(updateHeaderQuery,
                    new { Status = RequestItemDetails.Status, Id = RequestItemDetails.HeaderId },
                    connectionString);

                await OnConfirm.InvokeAsync(true);

                // Reload the page
                _navigation.NavigateTo(_navigation.Uri, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Canceling Request: {ex.Message}");
        }
        finally
        {
            ShowModal = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        ShowModal = false;
        await OnCancel.InvokeAsync(false); // Ensure the event is triggered
        StateHasChanged();
    }

}